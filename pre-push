#!/bin/bash
set -e

# --- COMPILATION ET TESTS MAVEN EN PREMIER ---
echo " Compilation du projet..."
mvn compile
if [ $? -ne 0 ]; then
  echo " √âchec de la compilation."
  exit 1
fi

echo " Compilation r√©ussie."

echo " Ex√©cution des tests..."
mvn test
if [ $? -ne 0 ]; then
  echo " √âchec des tests."
  exit 1
fi

echo " Tests r√©ussis. V√©rifications Git en cours..."

# --- CONFIGURATION ---
PROTECTED_BRANCHES=("main" "master" "prod")
MAX_COMMITS=20
ZERO_COMMIT="0000000000000000000000000000000000000000"
NO_FORCE_PUSH_BRANCHES=("main" "master" "develop" "release")
UNDELETABLE_BRANCHES=("main" "master" "prod")
declare -A BRANCH_AUTHORS
BRANCH_AUTHORS["release"]="release_manager"
BRANCH_AUTHORS["hotfix-prod"]="tech_lead"

# --- FONCTIONS ---

check_direct_push() {
  branch="$1"
  local_sha="$2"
  remote_sha="$3"

  for protected in "${PROTECTED_BRANCHES[@]}"; do
    if [[ "$branch" == "$protected" && "$remote_sha" != "$ZERO_COMMIT" ]]; then
      echo " Push direct interdit sur branche prot√©g√©e : $branch"
      return 1
    fi
  done
}

check_commit_limit() {
  local_sha="$1"
  remote_sha="$2"

  if [[ "$remote_sha" == "$ZERO_COMMIT" ]]; then
    return 0
  fi

  count=$(git rev-list --count "$remote_sha" "^$local_sha" 2>/dev/null || echo 0)
  if (( count > MAX_COMMITS )); then
    echo " Trop de commits : $count (max autoris√©: $MAX_COMMITS)"
    return 1
  fi
}

check_force_push() {
  branch="$1"
  local_sha="$2"
  remote_sha="$3"

  for protected in "${NO_FORCE_PUSH_BRANCHES[@]}"; do
    if [[ "$branch" == "$protected" ]]; then
      if [[ "$remote_sha" != "$ZERO_COMMIT" ]] && ! git merge-base --is-ancestor "$remote_sha" "$local_sha"; then
        echo " Force push d√©tect√© sur $branch"
        return 1
      fi
    fi
  done
}

check_author() {
  branch="$1"
  current_user=$(whoami) # ou autre m√©thode

  if [[ -v BRANCH_AUTHORS[$branch] ]]; then
    expected="${BRANCH_AUTHORS[$branch]}"
    if [[ "$current_user" != "$expected" ]]; then
      echo " Seul '$expected' peut pousser sur '$branch' (vous √™tes '$current_user')"
      return 1
    fi
  fi
}

check_gpg_signatures() {
  local_sha="$1"
  remote_sha="$2"

  if [[ "$remote_sha" == "$ZERO_COMMIT" ]]; then return 0; fi

  commits=$(git rev-list "$local_sha..$remote_sha")
  for sha in $commits; do
    if ! git verify-commit "$sha" >/dev/null 2>&1; then
      echo " Commit non sign√© ou signature invalide : $sha"
      return 1
    fi
  done
}

# --- V√âRIFICATIONS GIT APR√àS BUILD & TESTS ---

while read local_ref local_sha remote_ref remote_sha; do
  branch=$(basename "$remote_ref")

  echo "üîç V√©rification du push sur '$branch'..."

  check_direct_push "$branch" "$local_sha" "$remote_sha" || exit 1
  check_force_push "$branch" "$local_sha" "$remote_sha" || exit 1
  check_author "$branch" || exit 1
  check_commit_limit "$local_sha" "$remote_sha" || exit 1
  check_gpg_signatures "$local_sha" "$remote_sha" || exit 1

done

echo " Toutes les v√©rifications ont r√©ussi. Push autoris√©."
exit 0
