#!/bin/bash
#
# HOOK GIT UPDATE COMPLET
#
# Ce script s'exécute pour chaque branche mise à jour dans un push. Il vérifie :
# 1. Que les branches protégées ne sont pas supprimées.
# 2. Que le 'force push' (réécriture de l'historique) est interdit sur les branches sensibles.
# 3. Que seules les personnes autorisées peuvent pusher sur certaines branches.
#

# --- CONFIGURATION ---
NO_FORCE_PUSH_BRANCHES=("main" "master" "develop" "release")
UNDELETABLE_BRANCHES=("main" "master" "prod")
ZERO_COMMIT="0000000000000000000000000000000000000000"

# Définir qui a le droit de pusher sur quelle branche (tableau associatif)
# Clé = nom de la branche, Valeur = nom d'utilisateur système (via SSH)
declare -A BRANCH_AUTHORS
BRANCH_AUTHORS["release"]="release_manager"
BRANCH_AUTHORS["hotfix-prod"]="tech_lead"
# Remarque : Pour GitLab/GitHub, utilisez les variables d'environnement fournies
# (ex: $GL_USERNAME) au lieu de `whoami`.

# --- RÉCUPÉRATION DES ARGUMENTS ---
ref_name="$1"
old_rev="$2"
new_rev="$3"

# --- LOGIQUE DE VÉRIFICATION ---

branch_name=$(basename "$ref_name")
# Récupérer l'utilisateur qui pousse (méthode standard pour SSH)
pusher=$(whoami)

# 1. Vérifier la suppression de branche
if [ "$new_rev" == "$ZERO_COMMIT" ]; then
    for protected in "${UNDELETABLE_BRANCHES[@]}"; do
        if [[ "$branch_name" == "$protected" ]]; then
            echo "----------------------------------------------------------------" >&2
            echo "ERREUR: ACTION INTERDITE" >&2
            echo "La suppression de la branche protégée '$branch_name' est interdite." >&2
            echo "----------------------------------------------------------------" >&2
            exit 1
        fi
    done
fi

# 2. Vérifier le force push
is_protected_from_force_push=false
for protected in "${NO_FORCE_PUSH_BRANCHES[@]}"; do
    if [[ "$branch_name" == "$protected" ]]; then
        is_protected_from_force_push=true
        break
    fi
done

if $is_protected_from_force_push; then
    # Un force push est détecté si old_rev n'est pas un ancêtre de new_rev.
    # On ignore la création de branche (old_rev == 0)
    if [ "$old_rev" != "$ZERO_COMMIT" ] && ! git merge-base --is-ancestor "$old_rev" "$new_rev" >/dev/null 2>&1; then
        echo "----------------------------------------------------------------" >&2
        echo "ERREUR: PUSH REJETÉ" >&2
        echo "Le 'force push' (réécriture de l'historique) est interdit sur la branche '$branch_name'." >&2
        echo "----------------------------------------------------------------" >&2
        exit 1
    fi
fi

# 3. Vérifier l'auteur autorisé
if [[ -v BRANCH_AUTHORS[$branch_name] ]]; then
    allowed_author=${BRANCH_AUTHORS[$branch_name]}
    if [[ "$pusher" != "$allowed_author" ]]; then
        echo "----------------------------------------------------------------" >&2
        echo "ERREUR: PUSH REJETÉ" >&2
        echo "Seul l'utilisateur '$allowed_author' peut pusher sur la branche '$branch_name'." >&2
        echo "Votre utilisateur est '$pusher'." >&2
        echo "----------------------------------------------------------------" >&2
        exit 1
    fi
fi

# Si toutes les vérifications sont passées pour cette branche
exit 0